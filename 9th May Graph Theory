Search

from collections import deque


n = int(input("Number of vertices"))
e = int(input("Number of edges"))
visited = [False for i in range(n)]

# Edges are given in the next e lines in the format (a, b),
# meaning that the edge is connecting vertices a and b
# Do your own input!

adj_list = [] # This is an adjacency list!

def dfs(a):
    if visited[a]:
        return
    
    visited[a] = True
    for x in adj_list[a]:
        dfs(x)
        

def bfs(a):
    Q = deque()
    Q.append(a)
    
    while len(Q) != 0:
        x = Q.popleft()
        visited[x] = True
        
        for nx in adj_list[x]:
            if visited[nx]:
                continue
            
            Q.append(nx)
            visited[nx] = True

Adj matrix to list
N = int(input())
adjmat = []

for i in range(N):
  string = input()
  ls = string.split()
  new_ls = [int(i) for i in ls]
  adjmat.append(new_ls)

adjlist = [[] for i in range(N)]

for i in range(N):
  for j in range(N):
    # check if node i and j are connected
    if adjmat[i][j] == -1:
      continue
    else:
      adjlist[i].append((j, adjmat[i][j]))
      
for i in range(N):
  print(adjlist[i])
